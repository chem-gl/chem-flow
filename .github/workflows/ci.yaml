name: CI - tests and coverage

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Build image, run tests and coverage in Docker
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cache dir
        run: mkdir -p ${{ github.workspace }}/.cache/flow

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache/flow/cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache/flow/cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache/flow/target
          key: ${{ runner.os }}-cargo-target-${{ github.sha }}

      - name: Cache conda pkgs and pip cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache/flow/conda_pkgs
            ${{ github.workspace }}/.cache/flow/pip
          key: ${{ runner.os }}-python-pkgs-${{ hashFiles('crates/chem-providers/requirements.txt') }}

      - name: Build Docker images
        run: |
          # Construimos la imagen dev (contiene cargo) y la runtime
          docker build -t flow-chem-ci-dev --target base --build-arg FEATURES="" -f Dockerfile .
          docker build -t flow-chem-ci --build-arg FEATURES="" -f Dockerfile .

      - name: Run tests inside Docker (do not generate coverage)
        env:
          HOST_CACHE_DIR: ${{ github.workspace }}/.cache/flow
        run: |
          # Run the test suite inside the previously built dev image.
          # We intentionally do NOT generate coverage here; coverage artifacts
          # will be uploaded from the repository workspace as-is.
          docker run --rm --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
            -v "${{ github.workspace }}":/workspace -w /workspace \
            -e PYO3_PYTHON=/opt/conda/bin/python \
            -e PYTHON_SYS_EXECUTABLE=/opt/conda/bin/python \
            -e LD_LIBRARY_PATH=/opt/conda/lib \
            -e HOST_CACHE_DIR="${{ github.workspace }}/.cache/flow" \
            flow-chem-ci-dev bash -lc 'set -euo pipefail; cargo test --workspace --verbose'

      - name: Upload coverage report (lcov only)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info

      - name: List coverage files (for debug)
        run: |
          echo "Coverage files:"; ls -la coverage || true
